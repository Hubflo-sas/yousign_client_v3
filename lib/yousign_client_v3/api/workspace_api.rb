=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module YousignClientV3
  class WorkspaceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Workspace
    # Deletes a given Workspace and transfers everything that is attached to this Workspace to a another specified Workspace.
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteWorkspace] :body 
    # @return [nil]
    def delete_workspace(workspace_id, opts = {})
      delete_workspace_with_http_info(workspace_id, opts)
      nil
    end

    # Delete a Workspace
    # Deletes a given Workspace and transfers everything that is attached to this Workspace to a another specified Workspace.
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteWorkspace] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_workspace_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.delete_workspace ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.delete_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspaceId}'.sub('{' + 'workspaceId' + '}', workspace_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#delete_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Workspaces
    # Returns the list of all Workspaces within your Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 10)
    # @return [GetWorkspaces200Response]
    def get_workspaces(opts = {})
      data, _status_code, _headers = get_workspaces_with_http_info(opts)
      data
    end

    # List Workspaces
    # Returns the list of all Workspaces within your Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve.
    # @return [Array<(GetWorkspaces200Response, Integer, Hash)>] GetWorkspaces200Response data, response status code and response headers
    def get_workspaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.get_workspaces ...'
      end
      # resource path
      local_var_path = '/workspaces'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetWorkspaces200Response' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#get_workspaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the default Workspace
    # Retrieves the default Workspace.
    # @param [Hash] opts the optional parameters
    # @return [Workspace]
    def get_workspaces_default(opts = {})
      data, _status_code, _headers = get_workspaces_default_with_http_info(opts)
      data
    end

    # Get the default Workspace
    # Retrieves the default Workspace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workspace, Integer, Hash)>] Workspace data, response status code and response headers
    def get_workspaces_default_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.get_workspaces_default ...'
      end
      # resource path
      local_var_path = '/workspaces/default'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Workspace' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#get_workspaces_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Workspace
    # Retrieves a given Workspace.
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @return [Workspace]
    def get_workspaces_workspace_id(workspace_id, opts = {})
      data, _status_code, _headers = get_workspaces_workspace_id_with_http_info(workspace_id, opts)
      data
    end

    # Get a Workspace
    # Retrieves a given Workspace.
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workspace, Integer, Hash)>] Workspace data, response status code and response headers
    def get_workspaces_workspace_id_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.get_workspaces_workspace_id ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.get_workspaces_workspace_id"
      end
      # resource path
      local_var_path = '/workspaces/{workspaceId}'.sub('{' + 'workspaceId' + '}', workspace_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Workspace' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#get_workspaces_workspace_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark the given Workspace as default
    # Marks the given Workspace as default.
    # @param [Hash] opts the optional parameters
    # @option opts [MarkWorkspaceAsDefault] :body 
    # @return [nil]
    def mark_workspace_as_default(opts = {})
      mark_workspace_as_default_with_http_info(opts)
      nil
    end

    # Mark the given Workspace as default
    # Marks the given Workspace as default.
    # @param [Hash] opts the optional parameters
    # @option opts [MarkWorkspaceAsDefault] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_workspace_as_default_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.mark_workspace_as_default ...'
      end
      # resource path
      local_var_path = '/workspaces/default'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#mark_workspace_as_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Workspace
    # Updates a given Workspace. Any parameters not provided are left unchanged. 
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateWorkspace] :body 
    # @return [Workspace]
    def patch_workspaces_workspace_id(workspace_id, opts = {})
      data, _status_code, _headers = patch_workspaces_workspace_id_with_http_info(workspace_id, opts)
      data
    end

    # Update a Workspace
    # Updates a given Workspace. Any parameters not provided are left unchanged. 
    # @param workspace_id Workspace Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateWorkspace] :body 
    # @return [Array<(Workspace, Integer, Hash)>] Workspace data, response status code and response headers
    def patch_workspaces_workspace_id_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.patch_workspaces_workspace_id ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.patch_workspaces_workspace_id"
      end
      # resource path
      local_var_path = '/workspaces/{workspaceId}'.sub('{' + 'workspaceId' + '}', workspace_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Workspace' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#patch_workspaces_workspace_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Workspace
    # Creates a new Workspace in the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWorkspace] :body 
    # @return [Workspace]
    def post_workspace(opts = {})
      data, _status_code, _headers = post_workspace_with_http_info(opts)
      data
    end

    # Create a Workspace
    # Creates a new Workspace in the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWorkspace] :body 
    # @return [Array<(Workspace, Integer, Hash)>] Workspace data, response status code and response headers
    def post_workspace_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.post_workspace ...'
      end
      # resource path
      local_var_path = '/workspaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Workspace' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#post_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
