=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module YousignClientV3
  class DocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Document
    # Deletes a given Document from a Signature Request.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      delete_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      nil
    end

    # Delete a Document
    # Deletes a given Document from a Signature Request.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.delete_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.delete_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.delete_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#delete_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Signature Request's Documents
    # Returns a list of Documents for a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nature Filter by nature
    # @return [Array<Document>]
    def get_signature_requests_signature_request_id_documents(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts)
      data
    end

    # List Signature Request&#x27;s Documents
    # Returns a list of Documents for a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nature Filter by nature
    # @return [Array<(Array<Document>, Integer, Hash)>] Array<Document> data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents"
      end
      if @api_client.config.client_side_validation && opts[:'nature'] && !['attachment', 'signable_document'].include?(opts[:'nature'])
        fail ArgumentError, 'invalid value for "nature", must be one of attachment, signable_document'
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nature'] = opts[:'nature'] if !opts[:'nature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Document>' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Document
    # Retrieves a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def get_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Get a Document
    # Retrieves a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download a single Signature Request's Document
    # Downloads the PDF version of a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_signature_requests_signature_request_id_documents_documents_id_download(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_documents_id_download_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Download a single Signature Request&#x27;s Document
    # Downloads the PDF version of a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_documents_id_download_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}/download'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_documents_id_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download Signature Request's Documents
    # Downloads the PDF version of all Documents attached to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Specify Documents version to download, &#x60;completed&#x60; is only available when the Signature Request status is &#x60;done&#x60;.
    # @option opts [BOOLEAN] :archive Force zip archive download
    # @return [String]
    def get_signature_requests_signature_request_id_documents_download(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_download_with_http_info(signature_request_id, opts)
      data
    end

    # Download Signature Request&#x27;s Documents
    # Downloads the PDF version of all Documents attached to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Specify Documents version to download, &#x60;completed&#x60; is only available when the Signature Request status is &#x60;done&#x60;.
    # @option opts [BOOLEAN] :archive Force zip archive download
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_download_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_download"
      end
      if @api_client.config.client_side_validation && opts[:'version'] && !['current', 'completed'].include?(opts[:'version'])
        fail ArgumentError, 'invalid value for "version", must be one of current, completed'
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/download'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'archive'] = opts[:'archive'] if !opts[:'archive'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip, application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Document
    # Updates a given Document. Any parameters not provided are left unchanged.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDocument] :body 
    # @return [Document]
    def patch_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Update a Document
    # Updates a given Document. Any parameters not provided are left unchanged.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDocument] :body 
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def patch_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.patch_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.patch_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.patch_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#patch_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :nature 
    # @option opts [String] :insert_after_id 
    # @option opts [String] :password 
    # @option opts [String] :name 
    # @option opts [InitialsArea] :initials 
    # @option opts [BOOLEAN] :parse_anchors 
    # @return [Document]
    def post_signature_requests_signature_request_id_documents(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts)
      data
    end

    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :nature 
    # @option opts [String] :insert_after_id 
    # @option opts [String] :password 
    # @option opts [String] :name 
    # @option opts [InitialsArea] :initials 
    # @option opts [BOOLEAN] :parse_anchors 
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.post_signature_requests_signature_request_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents"
      end
      if @api_client.config.client_side_validation && opts[:'nature'] && !['attachment', 'signable_document'].include?(opts[:'nature'])
        fail ArgumentError, 'invalid value for "nature", must be one of attachment, signable_document'
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['nature'] = opts[:'nature'] if !opts[:'nature'].nil?
      form_params['insert_after_id'] = opts[:'insert_after_id'] if !opts[:'insert_after_id'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['initials'] = opts[:'initials'] if !opts[:'initials'].nil?
      form_params['parse_anchors'] = opts[:'parse_anchors'] if !opts[:'parse_anchors'].nil?

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#post_signature_requests_signature_request_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDocumentFromJson] :body Sending file with metadata
    # @return [Document]
    def post_signature_requests_signature_request_id_documents(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts)
      data
    end

    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDocumentFromJson] :body Sending file with metadata
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.post_signature_requests_signature_request_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['nature'] = opts[:'nature'] if !opts[:'nature'].nil?
      form_params['insert_after_id'] = opts[:'insert_after_id'] if !opts[:'insert_after_id'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['initials'] = opts[:'initials'] if !opts[:'initials'].nil?
      form_params['parse_anchors'] = opts[:'parse_anchors'] if !opts[:'parse_anchors'].nil?

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#post_signature_requests_signature_request_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a Document in a Signature Request
    # Replace the file of a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :name 
    # @return [Document]
    def post_signature_requests_signature_request_id_documents_document_id_replace(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_documents_document_id_replace_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Replace a Document in a Signature Request
    # Replace the file of a given Document.
    # @param signature_request_id Signature Request Id
    # @param document_id Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :name 
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def post_signature_requests_signature_request_id_documents_document_id_replace_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}/replace'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s).sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#post_signature_requests_signature_request_id_documents_document_id_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
