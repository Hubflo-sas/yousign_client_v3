=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module YousignClientV3
  class ArchiveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download archived file
    # Download the archived file using the ArchivedFileId.
    # @param archived_file_id ArchivedFileId
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_archives_archived_file_id_download(archived_file_id, opts = {})
      data, _status_code, _headers = get_archives_archived_file_id_download_with_http_info(archived_file_id, opts)
      data
    end

    # Download archived file
    # Download the archived file using the ArchivedFileId.
    # @param archived_file_id ArchivedFileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_archives_archived_file_id_download_with_http_info(archived_file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArchiveApi.get_archives_archived_file_id_download ...'
      end
      # verify the required parameter 'archived_file_id' is set
      if @api_client.config.client_side_validation && archived_file_id.nil?
        fail ArgumentError, "Missing the required parameter 'archived_file_id' when calling ArchiveApi.get_archives_archived_file_id_download"
      end
      # resource path
      local_var_path = '/archives/{archivedFileId}/download'.sub('{' + 'archivedFileId' + '}', archived_file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArchiveApi#get_archives_archived_file_id_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Direct upload an archived file
    # Archive a file in a secure digital safe for 10 years
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :workspace_id 
    # @option opts [String] :archive_y 
    # @option opts [Array<String>] :tags 
    # @option opts [String] :expired_at 
    # @return [ArchivedFile]
    def post_archives(opts = {})
      data, _status_code, _headers = post_archives_with_http_info(opts)
      data
    end

    # Direct upload an archived file
    # Archive a file in a secure digital safe for 10 years
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :workspace_id 
    # @option opts [String] :archive_y 
    # @option opts [Array<String>] :tags 
    # @option opts [String] :expired_at 
    # @return [Array<(ArchivedFile, Integer, Hash)>] ArchivedFile data, response status code and response headers
    def post_archives_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArchiveApi.post_archives ...'
      end
      # resource path
      local_var_path = '/archives'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['workspace_id'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?
      form_params['archive_y'] = opts[:'archive_y'] if !opts[:'archive_y'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :multi) if !opts[:'tags'].nil?
      form_params['expired_at'] = opts[:'expired_at'] if !opts[:'expired_at'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ArchivedFile' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArchiveApi#post_archives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
